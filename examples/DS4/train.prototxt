layer{
	name: "data"
	type: "HDF5Data"
	top: "data"
	top: "y"
	include{
		phase: TRAIN
	}
	hdf5_data_param{
		source: "DS4_data/train.txt"
		batch_size:100
	}
}
layer{
	name: "data"
	type: "HDF5Data"
	top: "data"
	top: "te_labels"
	include{
		phase: TEST
	}
	hdf5_data_param{
		source: "DS4_data/test.txt"
		batch_size:80
	}	
}
layer{
	name: "encode1"
	type: "InnerProduct"
	bottom: "data"
	top: "encode1"
	param{
		lr_mult:1
	}
	param{
		lr_mult:2
	}
	inner_product_param{
		num_output: 50
		weight_filler{
			type: "gaussian"
			std: 1
			sparse: 15
		}
		bias_filler{
			type: "constant"
		}
	}
}
layer{
	name: "encode1neuron"
	type: "Sigmoid"
	bottom: "encode1"
	top: "encode1neuron"
}
layer{
	name: "encode2"
	type: "InnerProduct"
	bottom: "encode1neuron"
	top: "encode2"
	param{
		lr_mult:1
	}
	param{
		lr_mult:2
	}
	inner_product_param{
		num_output: 30
		weight_filler{
			type: "gaussian"
			std: 1
		}
		bias_filler{
			type: "constant"
		}
	}
}
layer{
	name: "encode2neuron"
	type: "Sigmoid"
	bottom: "encode2"
	top: "encode2neuron"
}
layer{
	name: "encode3"
	type: "InnerProduct"
	bottom: "encode2neuron"
	top: "encode3"
	param{
		lr_mult:1
	}
	param{
		lr_mult:1
	}
	inner_product_param{
		num_output: 4
		weight_filler{
			type: "gaussian"
			std: 1
		}
		bias_filler{
			type: "constant"
		}
	}
}
layer{
	name: "encode3neuron"
	type: "Sigmoid"
	bottom: "encode3"
	top: "encode3neuron"
	include{
		phase: TEST
	}
}
layer{
	name: "loss"
	type: "SoftmaxWithLoss"
	bottom: "encode3"
	bottom: "y"
	top: "cross_entropy_loss"
	loss_weight: 1
	include{
		phase: TRAIN
	}
}
layer{
	name: "accuracy"
	type: "Accuracy"
	bottom: "encode3neuron"
	bottom: "te_labels"	
	top: "accuracy"
	include{
		phase: TEST
	}
}

